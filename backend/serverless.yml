service:
  name: todo-v2

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  dynamodb:    
    stages:
      - offline
    start:
      inMemory: true
      migrate: true
      cors: true
  s3:
    cors: s3cors.xml
    allowMismatchedSignatures: true
    host: localhost
    directory: /tmp
  documentation:
    api:
      info:
        version: '1.0.0'
        title: 'todo-v2 api'
        description: 'Enhanced TODO list API'
    models:
      - name: 'CreateTodoRequest'
        description: 'Request object to create TODO item'
        contentType: 'application/json'
        schema:
          type: 'object'
          required:
            - name
            - dueDate
          properties:
            name:
              type: 'string'
            dueDate:
              type: 'string'
      - name: 'UpdateTodoRequest'
        description: 'Request object to update a TODO item'
        contentType: 'application/json'
        schema:
          type: 'object'
          required:
            - name
            - dueDate
            - done
          properties:
            name:
              type: 'string'
            dueDate:
              type: 'string'
            done:
              type: 'boolean'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless
  stage: ${env:STAGE}
  region: eu-central-1
  tracing:
    lambda: true
    apiGateway: true
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_INDEX: TodosIndex-${self:provider.stage}
    ATTACHMENTS_BUCKET: rmoritz-todos-attachments-${self:provider.stage}    

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          documentation:
            summary: 'Create a new TODO item'
            description:  'Create a new TODO item'
            requestModels:
              'application/json': CreateTodoRequest
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: BodyOnlyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          documentation:
            summary: 'Update an existing TODO item'
            description:  'Update an existing TODO item'
            requestModels:
              'application/json': UpdateTodoRequest
            queryParams:
              - name: 'id'
                required: true
                description: 'ID of the TODO item to update'
          method: patch
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: FullValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          documentation:
            summary: 'Delete an existing TODO item'
            description: 'Delete an existing TODO item'
            queryParams:
              - name: 'id'
                required: true
                description: 'ID of the TODO item to delete'
          method: delete
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: ParamsOnlyValidator          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'            

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'        

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: todoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - POST
                - PUT
                - HEAD
                - DELETE
              MaxAge: 3600
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: AttachmentsBucketPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:getObject
              Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
        Bucket: !Ref AttachmentsBucket

    FullValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'full-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

    BodyOnlyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'body-only-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false        
        
    ParamsOnlyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'params-only-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true        